{"version":3,"sources":["Menu/LogoDelphine.svg","Menu/Brindesante.svg","Menu/Titre.js","Menu/LogoDelphine.js","Menu/GroupeFiches.js","Menu/Lienfiche.js","Menu/Menu.js","Entete.js","Apropos.js","Recherche.js","Fiche.js","Homepage.js","Menupage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Titre","className","src","ImgTitre","alt","LogoDelphine","ImgLogo","GroupeFiches","Lienfiche","props","to","fiche_id","titre","Menu","useEffect","fetchFiches","useState","items","setItems","a","fetch","data","json","console","log","map","item","key","_id","Entete","Apropos","Recherche","Fiche","match","fetchItem","params","id","setItem","Homepage","Menupage","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,0C,wCCA3CD,EAAOC,QAAU,IAA0B,yC,qOCa5BC,MATf,WACE,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKC,IAAUC,IAAI,UACxB,6ECGSC,MARf,WACE,OACE,yBAAKJ,UAAU,QACb,yBAAKC,IAAKI,IAASF,IAAI,WCIdG,MARf,WACE,OACE,yBAAKN,UAAU,gBACb,2CCQSO,MAVf,SAAmBC,GACjB,OACE,yBAAKR,UAAU,aACb,4BACE,kBAAC,IAAD,CAAMS,GAAE,iBAAYD,EAAME,WAAaF,EAAMG,UCsCtCC,MAtCf,WAGEC,qBAAU,WACRC,MACC,IALW,MAOYC,mBAAS,IAPrB,mBAOPC,EAPO,KAOAC,EAPA,KASRH,EAAW,uCAAG,8BAAAI,EAAA,sEACCC,MAAM,oCADP,cACZC,EADY,gBAIEA,EAAKC,OAJP,OAIZL,EAJY,OAKlBM,QAAQC,IAAIP,GACZC,EAASD,GANS,2CAAH,qDASjB,OACE,6BACE,kBAAC,IAAD,CAAMP,GAAG,KACP,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,yBAAKT,UAAU,QACb,kBAAC,EAAD,MAEA,6BACGgB,EAAMQ,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,KACZ,kBAAC,EAAD,CAAWhB,MAAOc,EAAKd,MAAOD,SAAUe,EAAKE,cCpB5CC,MAbf,WACE,OACE,yBAAK5B,UAAU,UACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAMS,GAAG,cAAT,gBAEF,yBAAKT,UAAU,YACb,kBAAC,IAAD,CAAMS,GAAG,YAAT,eCFOoB,MAPf,WACE,OACE,yBAAK7B,UAAU,WACb,8DCIS8B,MAPf,WACE,OACE,yBAAK9B,UAAU,aACb,2CCyBS+B,MA3Bf,YAA2B,IAAVC,EAAS,EAATA,MAGfnB,qBAAU,WACRoB,MACC,CAACD,EAAME,OAAOC,KALO,MAOApB,mBAAS,IAPT,mBAOjBU,EAPiB,KAOXW,EAPW,KASlBH,EAAS,uCAAG,8BAAAf,EAAA,sEACQC,MAAM,oCAAD,OACSa,EAAME,OAAOC,KAFnC,cACVF,EADU,gBAMGA,EAAUZ,OANb,OAMVI,EANU,OAQhBW,EAAQX,GACRH,QAAQC,IAAIE,GATI,2CAAH,qDAYf,OACE,yBAAKzB,UAAU,SACb,4BAAKyB,EAAKd,SCdD0B,MAVf,WACE,OACE,yBAAKrC,UAAU,YACb,gJCISsC,MAPf,WACE,OACE,yBAAKtC,UAAU,YACb,2CCwBSuC,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOwC,KAAK,WAAWC,UAAWZ,IAClC,kBAAC,IAAD,CAAOW,KAAK,aAAaC,UAAWV,IACpC,kBAAC,IAAD,CAAOS,KAAK,IAAIE,OAAK,EAACD,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,QAAQC,UAAWH,IAC/B,kBAAC,IAAD,CAAOE,KAAK,aAAaC,UAAWX,QCV1Ba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASd,MACvB,2DCZNe,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.3fb6fb2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoDelphine.11c17fc4.svg\";","module.exports = __webpack_public_path__ + \"static/media/Brindesante.8fe98f68.svg\";","import React from \"react\";\nimport ImgTitre from \"./Brindesante.svg\";\nimport ImgLogo from \"./LogoDelphine.svg\";\n\nfunction Titre() {\n  return (\n    <div className=\"Titre\">\n      <img src={ImgTitre} alt=\"Titre\" />\n      <p>Conseils médicaux & symptômes courants</p>\n    </div>\n  );\n}\n\nexport default Titre;\n","import React from \"react\";\nimport ImgLogo from \"./LogoDelphine.svg\";\n\nfunction LogoDelphine() {\n  return (\n    <div className=\"Logo\">\n      <img src={ImgLogo} alt=\"Logo\" />\n    </div>\n  );\n}\n\nexport default LogoDelphine;\n","import React from \"react\";\n\nfunction GroupeFiches() {\n  return (\n    <div className=\"GroupeFiches\">\n      <h1>SYMPTOMES</h1>\n    </div>\n  );\n}\n\nexport default GroupeFiches;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Lienfiche(props) {\n  return (\n    <div className=\"LienFiche\">\n      <h1>\n        <Link to={`/fiche/${props.fiche_id}`}>{props.titre}</Link>\n      </h1>\n    </div>\n  );\n}\n\nexport default Lienfiche;\n","import React, { useEffect, useState } from \"react\";\nimport Titre from \"./Titre\";\nimport LogoDelphine from \"./LogoDelphine\";\nimport GroupeFiches from \"./GroupeFiches\";\nimport Lienfiche from \"./Lienfiche\";\nimport { Link } from \"react-router-dom\";\n\nfunction Menu() {\n  //Se lance uniquement quand le composant se mount à cause de []\n  //sinon on peut préciser les cas de figures\n  useEffect(() => {\n    fetchFiches();\n  }, []);\n\n  const [items, setItems] = useState([]);\n\n  const fetchFiches = async () => {\n    const data = await fetch(\"http://api.brindesante.fr/fiches\");\n\n    //je convertis ce que je récupère en JSON pour obtenir un tabelau de fiches :)\n    const items = await data.json();\n    console.log(items);\n    setItems(items);\n  };\n\n  return (\n    <div>\n      <Link to=\"/\">\n        <Titre />\n        <LogoDelphine />\n      </Link>\n      <div className=\"Menu\">\n        <GroupeFiches />\n\n        <div>\n          {items.map(item => (\n            <h1 key={item._id}>\n              <Lienfiche titre={item.titre} fiche_id={item._id} />\n            </h1>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Menu;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction Entete() {\n  return (\n    <div className=\"Entete\">\n      <div className=\"Nav-link\">\n        <Link to=\"/recherche\">Rechercher </Link>\n      </div>\n      <div className=\"Nav-link\">\n        <Link to=\"/Apropos\">A propos</Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Entete;\n","import React from \"react\";\n\nfunction Apropos() {\n  return (\n    <div className=\"Apropos\">\n      <h1>A propos de Brin de santé</h1>\n    </div>\n  );\n}\nexport default Apropos;\n","import React from \"react\";\n\nfunction Recherche() {\n  return (\n    <div className=\"Recherche\">\n      <h1>Recherche</h1>\n    </div>\n  );\n}\nexport default Recherche;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Fiche({ match }) {\n  //Se lance uniquement quand le composant se mount à cause de []\n  //sinon on peut préciser les cas de figures\n  useEffect(() => {\n    fetchItem();\n  }, [match.params.id]);\n\n  const [item, setItem] = useState({});\n\n  const fetchItem = async () => {\n    const fetchItem = await fetch(\n      `http://api.brindesante.fr/fiches/${match.params.id}`\n    );\n\n    //je convertis ce que je récupère en JSON pour obtenir un tabelau de fiches :)\n    const item = await fetchItem.json();\n\n    setItem(item);\n    console.log(item);\n  };\n\n  return (\n    <div className=\"Fiche\">\n      <h1>{item.titre}</h1>\n    </div>\n  );\n}\nexport default Fiche;\n","import React from \"react\";\n\nfunction Homepage() {\n  return (\n    <div className=\"HomePage\">\n      <h1>\n        \"Des conseils sur les premiers soins à effectuer pour savoir quoi faire\n        quand on ne sait plus quoi faire !\"\n      </h1>\n    </div>\n  );\n}\nexport default Homepage;\n","import React from \"react\";\n\nfunction Menupage() {\n  return (\n    <div className=\"Menupage\">\n      <h1>Page Menu</h1>\n    </div>\n  );\n}\nexport default Menupage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Menu from \"./Menu/Menu\";\nimport Entete from \"./Entete\";\nimport Apropos from \"./Apropos\";\nimport Recherche from \"./Recherche\";\nimport Fiche from \"./Fiche\";\nimport Homepage from \"./Homepage\";\nimport Menupage from \"./Menupage\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Menu />\n        <div className=\"Page\">\n          <Entete />\n          <Route path=\"/Apropos\" component={Apropos} />\n          <Route path=\"/Fiche/:id\" component={Fiche} />\n          <Route path=\"/\" exact component={Homepage} />\n          <Route path=\"/Menu\" component={Menupage} />\n          <Route path=\"/Recherche\" component={Recherche} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}